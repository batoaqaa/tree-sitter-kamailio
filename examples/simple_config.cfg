#!KAMAILIO
# ------------------ global configuration parameters -------------------
# debug=3, 4, 5, ... ; 0=none
debug=3
#!define WITH_MYSQL
#!define NEW_VAR VAL
#!subst "/val/&Asd/sdf"
#!substdef "/asdfsad3/wq/"

// #!ifdef TESTBED_MODE
// route[DEBUG] {
//  xlog("SCRIPT: SIP $rm from: $fu to: $ru - srcip: $si"\n);
//  }
//  #!endif

#!ifdef TESTBED_MODE

modparam("acc|auth_db|usrloc", "db_url",
	"mysql://kamailio:kamailiorw@localhost/kamailio_testbed")
#!else
modparam("acc|auth_db|usrloc", "db_url",
	"mysql://kamailio:kamailiorw@10.0.0.2/kamailio_production")
#!endif
#!ifdef TESTBED_MODE
debug=3
#!else
debug=2
#!endif
#!substdef "/regx/subst/flags"
#!trydef  WITH_MYSQL

#!import_file "filename.cfg"
#!include_file "filename.cfg"

# name of the host
# this is used to generate the Call-Id header
# if not set, the hostname is used
# host=
# set filetype to kamailio cfg in vim
# vim: set filetype=kamailio:

/* Different comment */
/* The other type of comment */
/* multi-line
   comment */

/** Brief description which ends at this dot. Details follow
 *  here.
 */
loadmodule "mi_fifo.so"
/// This is a comment

loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
// Other comment
modparam("tmx", "fr_timer", 5)

/* This line should be classified as new comment */
/* hekko
 * world */
request_route {
    $var(x) = "string";
    $avp(y) = "string";
    $xavp(z) = "string";
    $retcode;
    $branch("THIS") = "x";

    $var(a) = $var(x) + "string";

    xlog("L_INFO", "Request received");
    # heekki
    route(REQINIT);

    route(NATDETECT);
    xlog("L_INFO", "Request received");

    if (is_method("INVITE")) {
	t_on_branch("1");
	t_on_reply("1");
    } else {
	t_relay();
    }

    route(1);
    if (is_method("INVITE")) {
	if (!t_is_set("failure_route"))
	    t_on_failure("MANAGE_FAILURE");
    }

    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")) {
	record_route();
    }

    exit;

    $var(y) = $rU;
	   for($var(y) != $null) {
		xlog("L_INFO", "Loop iteration $i");
		if ($var(y)== 5) {
			break;
		}
	}

    while(true) {
	t_relay();
	if($var(x) == $null) {
	    continue;
	}
	break;
    }
    if ($rU==$null) {
	# request with no Username in RURI
	sl_send_reply("484", "Address Incomplete");
	exit;
    }
}

route["custom"] {
    $(avp(i:3)[*]) = 123;
    # $(branch(uri)[$var(i)])
    # $(avp(ad)[2]) = value;
    $(branch(uri)[2]) = "sip:test@kamailio.org;transport=sctp";
    # $(avp(id)[*]) = newvalue;
    #$(C(bg))avp(i:20)$(C(xx)) [$avp(i:20)] $(C(br))cseq$(C(xx))=[$hdr(cseq)]

    $var(b) = "sip:" + $var(a) + "@" + $fd;
    $(avp(i:3)[*]) = 123;


    switch($retcode){
    case 0:
	xlog("L_INFO", "def");
    default:
        log("hello");
	break;
    }

    switch($retcode) {
    case 0:
        xlog("L_INFO", "def");
        break;
    default:
        break;
    }

    # log

    xlog("L_INFO", "Custom route");

    if ($var(x) || $avp(y)) {
       return;
    }

    exit;
}

route[1] {
    xlog("L_INFO", "Route 1");
    if (!t_relay()) {
	sl_reply_error();
    } else {
	return;
    }
    $var(user) = $(rU{re.subst,/A/a/g});

    drop();
    exit;
}

/**
 * Catch all kamailio originated responses for LI
 */
event_route[tm:local-response] {
    route(INTERCEPT_HANDLING);
}
